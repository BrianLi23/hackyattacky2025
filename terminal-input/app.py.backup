from flask import Flask, jsonify, request
from flask_cors import CORS
import sqlite3
import json
import os
from typing import List, Dict, Optional
import re

app = Flask(__name__)
CORS(app)  # Enable CORS for frontend communication

# Database configuration
DATABASE_PATH = 'data/products.db'

class ProductManager:
    """Class to manage product database operations"""
    
    def __init__(self, database_path: str = 'data/products.db'):
        """
        Initialize ProductManager with database path
        
        Args:
            database_path (str): Path to the SQLite database file
        """
        self.database_path = database_path
    
    def _get_db_connection(self) -> sqlite3.Connection:
        """
        Create and return a database connection with Row factory
        
        Returns:
            sqlite3.Connection: Database connection with Row factory
        """
        conn = sqlite3.connect(self.database_path)
        conn.row_factory = sqlite3.Row
        return conn
    
    def _format_product_row(self, row: sqlite3.Row) -> Dict:
        """
        Convert a raw database row to formatted product dictionary
        
        Args:
            row (sqlite3.Row): Raw database row
            
        Returns:
            Dict: Formatted product dictionary
        """
        try:
            return {
                'id': row['id'],
                'title': row['title'],
                'description': row['description'],
                'price': row['price'],
                'image': row['image'],
                'sustainability': {
                    'score': row['sustainability_score'],
                    'co2Saved': row['co2_saved'],
                    'materials': json.loads(row['materials']),
                    'energyEfficiency': row['energy_efficiency'],
                    'refurbished': bool(row['refurbished']),
                    'warranty': row['warranty']
                }
            }
        except Exception as e:
            print(f"Error formatting product row: {e}")
            return None
    
    def get_all_products(self) -> List[Dict]:
        """
        Get all products from the database
        
        Returns:
            List[Dict]: List of formatted product dictionaries
            
            Schema:
            {
                'id': int,
                'title': str,
                'description': str,
                'price': float,
                'image': str,
                'sustainability': {
                    'score': int,
                    'co2Saved': float,
                    'materials': List[str],
                    'energyEfficiency': str,
                    'refurbished': bool,
                    'warranty': str
                }
            }
        """
        try:
            conn = self._get_db_connection()
            cursor = conn.cursor()
            
            cursor.execute('SELECT * FROM products ORDER BY id')
            rows = cursor.fetchall()
            
            products = []
            for row in rows:
                formatted_product = self._format_product_row(row)
                if formatted_product:
                    products.append(formatted_product)
            
            conn.close()
            return products
            
        except Exception as e:
            print(f"Error getting all products: {e}")
            return []
    
    def get_product_by_id(self, product_id: int) -> Optional[Dict]:
        """
        Get a specific product by its ID
        
        Args:
            product_id (int): The ID of the product to retrieve
            
        Returns:
            Optional[Dict]: Formatted product dictionary or None if not found

            Schema:
            {
                'id': int,
                'title': str,
                'description': str,
                'price': float,
                'image': str,
                'sustainability': {
                    'score': int,
                    'co2Saved': float,
                    'materials': List[str],
                    'energyEfficiency': str,
                    'refurbished': bool,
                    'warranty': str
                }
            }
        """
        try:
            conn = self._get_db_connection()
            cursor = conn.cursor()
            
            cursor.execute('SELECT * FROM products WHERE id = ?', (product_id,))
            row = cursor.fetchone()
            
            conn.close()
            
            if row:
                return self._format_product_row(row)
            else:
                return None
                
        except Exception as e:
            print(f"Error getting product by ID {product_id}: {e}")
            return None
    
    def get_product_count(self) -> int:
        """
        Get the total number of products in the database
        
        Returns:
            int: Number of products
        """
        try:
            conn = self._get_db_connection()
            cursor = conn.cursor()
            
            cursor.execute('SELECT COUNT(*) FROM products')
            count = cursor.fetchone()[0]
            
            conn.close()
            return count
            
        except Exception as e:
            print(f"Error getting product count: {e}")
            return 0


# Initialize ProductManager
product_manager = ProductManager(DATABASE_PATH)

def init_database():
    """Initialize the SQLite database with products table and initial data"""
    try:
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # Create products table
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS products (
                id INTEGER PRIMARY KEY,
                title TEXT NOT NULL,
                description TEXT NOT NULL,
                price REAL NOT NULL,
                image TEXT NOT NULL,
                sustainability_score INTEGER NOT NULL,
                co2_saved REAL NOT NULL,
                materials TEXT NOT NULL,  -- JSON string
                energy_efficiency TEXT NOT NULL,
                refurbished BOOLEAN NOT NULL,
                warranty TEXT NOT NULL
            )
        ''')
        
        # Check if table has data
        cursor.execute('SELECT COUNT(*) FROM products')
        count = cursor.fetchone()[0]
        
        if count == 0:
            print("Database is empty, no fallback data to load")
        else:
            print(f"Database already has {count} products")
            
        conn.close()
        return True
    except Exception as e:
        print(f"Database initialization failed: {e}")
        return False

# Legacy wrapper functions for backward compatibility
def get_products_from_db() -> List[Dict]:
    return product_manager.get_all_products()

def get_product_by_id(product_id: int) -> Optional[Dict]:
    return product_manager.get_product_by_id(product_id)

@app.route('/api/products', methods=['GET'])
def get_products():
    """GET /api/products - Get all products"""
    try:
        products = product_manager.get_all_products()
        if products:
            return jsonify(products)
        else:
            return jsonify({'error': 'No products found'}), 404
    except Exception as e:
        print(f"Error in get_products: {e}")
        return jsonify({'error': 'Database error'}), 500

@app.route('/api/products/<int:product_id>', methods=['GET'])
def get_product(product_id):
    """GET /api/products/:id - Get single product by ID"""
    try:
        product = product_manager.get_product_by_id(product_id)
        if product:
            return jsonify(product)
        else:
            return jsonify({'error': 'Product not found'}), 404
    except Exception as e:
        print(f"Error in get_product: {e}")
        return jsonify({'error': 'Database error'}), 500

@app.route('/api/messages', methods=['GET'])
def get_messages():
    """GET /api/messages - Get all messages"""
    try:
        conn = sqlite3.connect(DATABASE_PATH)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM messages ORDER BY id')
        rows = cursor.fetchall()
        if rows:
            messages = []
            for row in rows:
                messages.append({
                    'from': row['from_user'],
                    'to': row['to_user'],
                    'text': row['text']
                })
            conn.close()
            return jsonify(messages)
        else:
            conn.close()
            return jsonify({'error': 'No messages found'}), 404
    except Exception as e:
        print(f"DB error: {e}")
        return jsonify({'error': 'Database error'}), 500